/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ru.nim;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import ru.nim.psi.NimTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Nim.flex</tt>
 */
class NimLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\0\1\5\1\26\3\0\1\14\3\0\1\46\1\0\1\46"+
    "\1\47\1\0\1\32\1\31\1\42\1\41\1\43\1\30\1\40\1\30\1\37\1\3\7\0\1\21\1\35\2"+
    "\21\1\45\1\50\2\0\1\36\10\0\1\25\2\0\1\44\2\0\1\33\2\0\1\27\1\6\1\51\1\0\1"+
    "\4\1\0\1\15\1\16\1\11\1\21\1\17\1\13\2\0\1\36\2\0\1\12\1\0\1\12\1\34\1\7\1"+
    "\0\1\10\1\0\1\12\1\22\1\12\1\0\1\20\2\0\1\23\1\0\1\24\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\3\1\1\5\1\4"+
    "\2\6\1\0\1\7\4\0\1\10\3\0\1\5\1\11"+
    "\3\0\1\12\1\13\1\0\1\14\1\0\1\15\1\0"+
    "\1\15\1\10\4\0\1\16\1\0\1\17\1\20\1\21"+
    "\1\7\1\0\1\22\3\0\1\23\10\0\1\24\3\0"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\4\0\1\16"+
    "\3\0\1\33\5\0\1\33\3\0\1\33\22\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\124\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\124\0\u03c6\0\u03f0\0\u041a\0\124\0\124\0\u0444\0\u046e"+
    "\0\u0498\0\u04c2\0\u04ec\0\u0516\0\124\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\124\0\u06ba"+
    "\0\124\0\u06e4\0\u070e\0\u0738\0\124\0\u0762\0\u078c\0\u07b6"+
    "\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\124\0\u08b2\0\u08dc"+
    "\0\u0906\0\124\0\124\0\124\0\124\0\124\0\124\0\u0930"+
    "\0\u095a\0\u0984\0\u09ae\0\124\0\u09d8\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6"+
    "\0\u0bd0\0\124\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc"+
    "\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\3\1\10"+
    "\1\11\14\3\1\11\1\12\1\3\2\6\1\13\4\3"+
    "\5\6\6\3\26\14\1\15\23\14\53\0\1\4\52\0"+
    "\1\5\52\0\1\6\1\16\6\0\1\17\1\20\2\0"+
    "\1\21\10\0\3\6\4\0\5\6\1\0\1\21\1\0"+
    "\1\22\1\17\1\0\5\23\1\24\1\25\43\23\10\0"+
    "\1\26\46\0\1\27\44\0\1\30\1\0\25\30\1\31"+
    "\22\30\3\0\1\6\1\16\6\0\1\17\1\20\1\0"+
    "\1\32\1\21\1\33\7\0\3\6\1\33\1\34\1\32"+
    "\1\0\5\6\1\0\1\21\1\0\1\22\1\17\30\0"+
    "\1\35\21\0\1\36\3\0\1\6\24\0\3\6\4\0"+
    "\5\6\47\0\1\37\23\0\1\17\6\0\1\40\13\0"+
    "\1\41\5\0\1\40\3\0\1\17\4\0\1\42\24\0"+
    "\3\42\4\0\5\42\2\0\1\43\6\0\1\44\24\0"+
    "\3\44\4\0\5\44\6\0\5\23\1\45\1\25\43\23"+
    "\5\0\1\46\47\0\1\23\1\0\13\23\1\47\1\0"+
    "\1\50\5\0\3\23\4\0\5\23\42\0\1\51\15\0"+
    "\5\27\1\52\1\53\43\27\1\30\1\0\25\30\1\0"+
    "\22\30\31\0\2\54\22\0\1\55\5\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\1\55\6\0\3\55\2\0"+
    "\1\55\1\0\5\55\1\0\1\55\2\0\1\55\31\0"+
    "\3\56\5\0\4\56\50\0\1\57\40\0\1\60\5\0"+
    "\1\61\1\62\1\63\41\0\1\64\5\0\1\65\1\66"+
    "\1\67\13\0\1\42\1\43\6\0\1\17\1\70\13\0"+
    "\3\42\4\0\5\42\4\0\1\17\4\0\1\42\24\0"+
    "\3\42\4\0\5\42\11\0\1\44\1\22\6\0\1\17"+
    "\1\70\2\0\1\21\10\0\3\44\4\0\5\44\1\0"+
    "\1\21\2\0\1\17\1\0\5\46\1\71\1\72\43\46"+
    "\3\0\1\73\5\0\1\73\1\0\1\73\1\0\3\73"+
    "\1\0\1\73\6\0\3\73\2\0\1\73\1\0\5\73"+
    "\1\0\1\73\2\0\1\73\4\0\1\74\5\0\1\74"+
    "\1\0\1\74\1\0\3\74\1\0\1\74\1\0\1\75"+
    "\4\0\3\74\2\0\1\74\1\0\5\74\1\0\1\74"+
    "\2\0\1\74\12\0\1\76\45\0\1\77\47\0\1\27"+
    "\1\0\13\27\1\100\1\0\1\101\5\0\3\27\4\0"+
    "\5\27\12\0\1\32\6\0\1\17\1\20\14\0\2\54"+
    "\15\0\1\17\4\0\1\55\1\33\4\0\1\55\1\0"+
    "\1\55\1\20\3\55\1\0\1\55\6\0\3\55\2\0"+
    "\1\55\1\0\5\55\1\0\1\55\2\0\1\55\5\0"+
    "\1\34\6\0\1\17\1\20\13\0\3\56\5\0\4\56"+
    "\4\0\1\17\41\0\1\102\54\0\1\103\50\0\1\104"+
    "\47\0\1\105\54\0\1\106\50\0\1\107\22\0\1\17"+
    "\34\0\1\17\1\0\5\46\1\110\44\46\3\0\1\46"+
    "\1\0\13\46\1\111\1\0\1\112\5\0\3\46\4\0"+
    "\5\46\11\0\1\23\5\0\1\23\1\0\1\23\1\0"+
    "\3\23\1\0\1\23\6\0\3\23\2\0\1\23\1\0"+
    "\5\23\1\0\1\23\2\0\1\23\4\0\1\47\5\0"+
    "\1\47\1\0\1\47\1\0\3\47\1\0\1\47\6\0"+
    "\3\47\2\0\1\47\1\0\5\47\1\0\1\47\2\0"+
    "\1\47\4\0\1\113\5\0\1\113\1\0\1\113\1\0"+
    "\3\113\1\0\1\113\6\0\3\113\2\0\1\113\1\0"+
    "\5\113\1\0\1\113\2\0\1\113\1\0\5\27\1\114"+
    "\44\27\3\0\1\115\5\0\1\115\1\0\1\115\1\0"+
    "\3\115\1\0\1\115\6\0\3\115\2\0\1\115\1\0"+
    "\5\115\1\0\1\115\2\0\1\115\4\0\1\116\5\0"+
    "\1\116\1\0\1\116\1\0\3\116\1\0\1\116\1\0"+
    "\1\117\4\0\3\116\2\0\1\116\1\0\5\116\1\0"+
    "\1\116\2\0\1\116\1\0\5\46\1\120\44\46\3\0"+
    "\1\121\5\0\1\121\1\0\1\121\1\0\3\121\1\0"+
    "\1\121\6\0\3\121\2\0\1\121\1\0\5\121\1\0"+
    "\1\121\2\0\1\121\4\0\1\122\5\0\1\122\1\0"+
    "\1\122\1\0\3\122\1\0\1\122\1\0\1\123\4\0"+
    "\3\122\2\0\1\122\1\0\5\122\1\0\1\122\2\0"+
    "\1\122\4\0\1\124\5\0\1\124\1\0\1\124\1\0"+
    "\3\124\1\0\1\124\2\0\1\23\3\0\3\124\2\0"+
    "\1\124\1\0\5\124\1\0\1\124\2\0\1\124\4\0"+
    "\1\27\5\0\1\27\1\0\1\27\1\0\3\27\1\0"+
    "\1\27\6\0\3\27\2\0\1\27\1\0\5\27\1\0"+
    "\1\27\2\0\1\27\4\0\1\100\5\0\1\100\1\0"+
    "\1\100\1\0\3\100\1\0\1\100\6\0\3\100\2\0"+
    "\1\100\1\0\5\100\1\0\1\100\2\0\1\100\4\0"+
    "\1\125\5\0\1\125\1\0\1\125\1\0\3\125\1\0"+
    "\1\125\6\0\3\125\2\0\1\125\1\0\5\125\1\0"+
    "\1\125\2\0\1\125\6\0\1\126\47\0\1\46\5\0"+
    "\1\46\1\0\1\46\1\0\3\46\1\0\1\46\6\0"+
    "\3\46\2\0\1\46\1\0\5\46\1\0\1\46\2\0"+
    "\1\46\4\0\1\111\5\0\1\111\1\0\1\111\1\0"+
    "\3\111\1\0\1\111\6\0\3\111\2\0\1\111\1\0"+
    "\5\111\1\0\1\111\2\0\1\111\4\0\1\127\5\0"+
    "\1\127\1\0\1\127\1\0\3\127\1\0\1\127\6\0"+
    "\3\127\2\0\1\127\1\0\5\127\1\0\1\127\2\0"+
    "\1\127\4\0\1\130\5\0\1\130\1\0\1\130\1\0"+
    "\3\130\1\0\1\130\2\0\1\23\3\0\3\130\2\0"+
    "\1\130\1\0\5\130\1\0\1\130\2\0\1\130\4\0"+
    "\1\131\5\0\1\131\1\0\1\131\1\0\3\131\1\0"+
    "\1\131\2\0\1\27\3\0\3\131\2\0\1\131\1\0"+
    "\5\131\1\0\1\131\2\0\1\131\6\0\1\132\47\0"+
    "\1\133\5\0\1\133\1\0\1\133\1\0\3\133\1\0"+
    "\1\133\2\0\1\46\3\0\3\133\2\0\1\133\1\0"+
    "\5\133\1\0\1\133\2\0\1\133\4\0\1\134\5\0"+
    "\1\134\1\0\1\134\1\0\3\134\1\0\1\134\2\0"+
    "\1\23\3\0\3\134\2\0\1\134\1\0\5\134\1\0"+
    "\1\134\2\0\1\134\4\0\1\135\5\0\1\135\1\0"+
    "\1\135\1\0\3\135\1\0\1\135\2\0\1\27\3\0"+
    "\3\135\2\0\1\135\1\0\5\135\1\0\1\135\2\0"+
    "\1\135\4\0\1\136\5\0\1\136\1\0\1\136\1\0"+
    "\3\136\1\0\1\136\2\0\1\46\3\0\3\136\2\0"+
    "\1\136\1\0\5\136\1\0\1\136\2\0\1\136\4\0"+
    "\1\137\5\0\1\137\1\0\1\137\1\0\3\137\1\0"+
    "\1\137\2\0\1\23\3\0\3\137\2\0\1\137\1\0"+
    "\5\137\1\0\1\137\2\0\1\137\4\0\1\140\5\0"+
    "\1\140\1\0\1\140\1\0\3\140\1\0\1\140\2\0"+
    "\1\27\3\0\3\140\2\0\1\140\1\0\5\140\1\0"+
    "\1\140\2\0\1\140\4\0\1\141\5\0\1\141\1\0"+
    "\1\141\1\0\3\141\1\0\1\141\2\0\1\46\3\0"+
    "\3\141\2\0\1\141\1\0\5\141\1\0\1\141\2\0"+
    "\1\141\4\0\1\142\5\0\1\142\1\0\1\142\1\0"+
    "\3\142\1\0\1\142\2\0\1\23\3\0\3\142\2\0"+
    "\1\142\1\0\5\142\1\0\1\142\2\0\1\142\4\0"+
    "\1\143\5\0\1\143\1\0\1\143\1\0\3\143\1\0"+
    "\1\143\2\0\1\27\3\0\3\143\2\0\1\143\1\0"+
    "\5\143\1\0\1\143\2\0\1\143\4\0\1\144\5\0"+
    "\1\144\1\0\1\144\1\0\3\144\1\0\1\144\2\0"+
    "\1\46\3\0\3\144\2\0\1\144\1\0\5\144\1\0"+
    "\1\144\2\0\1\144\4\0\1\145\5\0\1\145\1\0"+
    "\1\145\1\0\3\145\1\0\1\145\2\0\1\23\3\0"+
    "\3\145\2\0\1\145\1\0\5\145\1\0\1\145\2\0"+
    "\1\145\4\0\1\146\5\0\1\146\1\0\1\146\1\0"+
    "\3\146\1\0\1\146\2\0\1\27\3\0\3\146\2\0"+
    "\1\146\1\0\5\146\1\0\1\146\2\0\1\146\4\0"+
    "\1\147\5\0\1\147\1\0\1\147\1\0\3\147\1\0"+
    "\1\147\2\0\1\46\3\0\3\147\2\0\1\147\1\0"+
    "\5\147\1\0\1\147\2\0\1\147\4\0\1\150\5\0"+
    "\1\150\1\0\1\150\1\0\3\150\1\0\1\150\2\0"+
    "\1\23\3\0\3\150\2\0\1\150\1\0\5\150\1\0"+
    "\1\150\2\0\1\150\4\0\1\151\5\0\1\151\1\0"+
    "\1\151\1\0\3\151\1\0\1\151\2\0\1\27\3\0"+
    "\3\151\2\0\1\151\1\0\5\151\1\0\1\151\2\0"+
    "\1\151\4\0\1\152\5\0\1\152\1\0\1\152\1\0"+
    "\3\152\1\0\1\152\2\0\1\46\3\0\3\152\2\0"+
    "\1\152\1\0\5\152\1\0\1\152\2\0\1\152\25\0"+
    "\1\23\30\0\1\153\5\0\1\153\1\0\1\153\1\0"+
    "\3\153\1\0\1\153\2\0\1\27\3\0\3\153\2\0"+
    "\1\153\1\0\5\153\1\0\1\153\2\0\1\153\4\0"+
    "\1\154\5\0\1\154\1\0\1\154\1\0\3\154\1\0"+
    "\1\154\2\0\1\46\3\0\3\154\2\0\1\154\1\0"+
    "\5\154\1\0\1\154\2\0\1\154\25\0\1\27\51\0"+
    "\1\46\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3822];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\10\1\1\11\1\1\1\0\1\1\4\0"+
    "\1\1\3\0\1\1\1\11\3\0\2\11\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\4\0\1\1\1\0"+
    "\3\1\1\11\1\0\1\11\3\0\1\11\10\0\1\11"+
    "\3\0\6\11\4\0\1\11\3\0\1\1\5\0\1\1"+
    "\3\0\1\11\22\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int block_comment_depth = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NimLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case STATE_BLOCK_COMMENT: {
              yybegin(YYINITIAL); return NimTypes.BLOCK_COMMENT;
            }  // fall though
            case 109: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 28: break;
          case 2: 
            { return NimTypes.NEW_LINE;
            } 
            // fall through
          case 29: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 30: break;
          case 4: 
            { return NimTypes.DEC_LIT;
            } 
            // fall through
          case 31: break;
          case 5: 
            { return NimTypes.COMMENT;
            } 
            // fall through
          case 32: break;
          case 6: 
            { 
            } 
            // fall through
          case 33: break;
          case 7: 
            { return NimTypes.FLOAT32_LIT;
            } 
            // fall through
          case 34: break;
          case 8: 
            { return NimTypes.STR_LIT;
            } 
            // fall through
          case 35: break;
          case 9: 
            { block_comment_depth = 0; yypushback(2); yybegin(STATE_BLOCK_COMMENT);
            } 
            // fall through
          case 36: break;
          case 10: 
            { block_comment_depth++;
            } 
            // fall through
          case 37: break;
          case 11: 
            { if (--block_comment_depth == 0) {yybegin(YYINITIAL); zzStartRead = -1; return NimTypes.BLOCK_COMMENT;}
            } 
            // fall through
          case 38: break;
          case 12: 
            { return NimTypes.UINT_LIT;
            } 
            // fall through
          case 39: break;
          case 13: 
            { return NimTypes.FLOAT_LIT;
            } 
            // fall through
          case 40: break;
          case 14: 
            { return NimTypes.RSTR_LIT;
            } 
            // fall through
          case 41: break;
          case 15: 
            { return NimTypes.BIN_LIT;
            } 
            // fall through
          case 42: break;
          case 16: 
            { return NimTypes.HEX_LIT;
            } 
            // fall through
          case 43: break;
          case 17: 
            { return NimTypes.OCT_LIT;
            } 
            // fall through
          case 44: break;
          case 18: 
            { return NimTypes.UINT8_LIT;
            } 
            // fall through
          case 45: break;
          case 19: 
            { return NimTypes.INT8_LIT;
            } 
            // fall through
          case 46: break;
          case 20: 
            { return NimTypes.KW_PROC;
            } 
            // fall through
          case 47: break;
          case 21: 
            { return NimTypes.UINT16_LIT;
            } 
            // fall through
          case 48: break;
          case 22: 
            { return NimTypes.UINT64_LIT;
            } 
            // fall through
          case 49: break;
          case 23: 
            { return NimTypes.UINT32_LIT;
            } 
            // fall through
          case 50: break;
          case 24: 
            { return NimTypes.INT16_LIT;
            } 
            // fall through
          case 51: break;
          case 25: 
            { return NimTypes.INT64_LIT;
            } 
            // fall through
          case 52: break;
          case 26: 
            { return NimTypes.INT32_LIT;
            } 
            // fall through
          case 53: break;
          case 27: 
            { return NimTypes.TRIPLESTR_LIT;
            } 
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
